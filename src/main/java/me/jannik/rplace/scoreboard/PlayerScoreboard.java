package me.jannik.rplace.scoreboard;

import org.apache.commons.lang3.StringUtils;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.scoreboard.*;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * This class has been generated by Jannik on 26.12.2021 13:31
 * You are not allowed to edit this resource or other components of it
 * Â© 2021 Jannik
 */

public class PlayerScoreboard {

    private Scoreboard scoreboard;
    private Objective objective;
    private int lastSentIndex = -1;
    private List<ScoreboardText> lines;
    private String title;
    private String id;

    public PlayerScoreboard(String title) {
        this.title = title;
        this.id = UUID.randomUUID().toString();
        this.lines = new ArrayList<>();
        this.scoreboard = Bukkit.getScoreboardManager().getNewScoreboard();
        this.objective = this.scoreboard.registerNewObjective("dummyBoard", "dummy");
        this.objective.setDisplayName(title);
        this.objective.setDisplaySlot(DisplaySlot.SIDEBAR);
    }

    public String getNameForIndex(int index) {
        return ChatColor.values()[index].toString() + ChatColor.RESET;
    }

    private Team getOrCreateTeam(String team, int i) {
        Team value = this.scoreboard.getTeam(team);
        if (value == null) {
            value = this.scoreboard.registerNewTeam(team);
            value.addEntry(this.getNameForIndex(i));
        }
        return value;
    }

    public void update() {
        updateTitle();

        for (int i = 0; i < lines.size(); i++) {
            Team team = this.getOrCreateTeam(ChatColor.stripColor(StringUtils.left(id, 14)) + i, i);

            ScoreboardText text = lines.get(lines.size() - i - 1);

            text.apply(team);

            Score score = this.objective.getScore(this.getNameForIndex(i));
            if(score.getScore() != (i + 1)) {
                score.setScore(i + 1);
            }
        }

        if (this.lastSentIndex != -1) {
            for (int i = 0; i < this.lastSentIndex - lines.size(); i++) {
                this.remove(lines.size() + i);
            }
        }

        this.lastSentIndex = lines.size();
    }

    public void updateTitle() {
        this.objective.setDisplayName(this.title);
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void remove(int index) {
        String name = this.getNameForIndex(index);

        this.scoreboard.resetScores(name);

        Team team = getOrCreateTeam(ChatColor.stripColor(StringUtils.left(id, 14)) + index, index);
        team.unregister();
    }

    public void updateScore(String fieldName, String text) {
        ScoreboardText field = this.getEntry(fieldName);

        if(field instanceof BasicScoreboardText) {
            BasicScoreboardText fieldText = (BasicScoreboardText) field;
            fieldText.setText(text);
            this.updateEntry(field);
        }
    }

    public void updateEntry(ScoreboardText scoreboardText) {
        for (int i = 0; i < lines.size(); i++) {
            ScoreboardText text = lines.get(lines.size() - i - 1);

            if(!text.equals(scoreboardText))
                continue;

            Team team = this.getOrCreateTeam(ChatColor.stripColor(StringUtils.left(id, 14)) + i, i);

            text.apply(team);

            Score score = this.objective.getScore(this.getNameForIndex(i));
            if(score.getScore() != (i + 1)) {
                score.setScore(i + 1);
            }
        }

    }

    public void clearEntries() {
        this.lines.clear();
    }

    @Nullable
    public ScoreboardText getEntry(String s) {
        return this.lines.stream().filter(scoreboardText -> s.equals(scoreboardText.getIdentifier())).findFirst().orElse(null);
    }

    public <T extends ScoreboardText> T addEntry(T scoreboardText) {
        this.lines.add(scoreboardText);
        return scoreboardText;
    }

    public void addEntry(String scoreboardText) {
        addEntry(new BasicScoreboardText(scoreboardText));
    }

    public void addEntry(String scoreboardText, String identifier) {
        addEntry(new BasicScoreboardText(scoreboardText, identifier));
    }

    public List<ScoreboardText> getLines() {
        return lines;
    }

    public void removeEntry(ScoreboardText scoreboardText) {
        this.lines.remove(scoreboardText);
    }

    public void setScoreboard(Player player) {
        player.setScoreboard(getBukkitScoreboard());
    }

    public Scoreboard getBukkitScoreboard() {
        return this.scoreboard;
    }
}
